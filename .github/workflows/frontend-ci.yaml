name: MP Frontend CI

on:
  # This is for running on-demand
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      # This will only run on changes to the frontend code
      - "starter/frontend/**"
env:
  NODE_VERSION: 20.x

jobs:

  lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1

      - name: Cache Node.js dependencies
        uses: actions/cache@v4.1.1
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: |
          npm install

      - name: Run ESLint
        run: |
          npm run lint -- --fix

  test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1
      - name: Install dependencies
        run: |
          npm install -f
      - name: Run tests
        run: |
          npm run test
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.1

      - name: Install dependencies
        run: |
          npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Build, Tag, and Push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: mp-frontend
          IMAGE_TAG: latest
        run: |
          aws eks update-kubeconfig --name cluster
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo $EXTERNALIP
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker images

      - name: Cache Docker image
        uses: actions/cache@v4.1.1
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
